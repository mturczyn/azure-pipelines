# This is multi stage pipeline that first checks the code,
# this deploys resources using bicep file, so it also
# verifies the deployment and run post-deployment
# smoke testing (by trying to connect to web app
# deployed by the pipeline).
stages:
- stage: Lint
  jobs:
  - job: LintCodeJob
    steps:
    - script: az bicep build --file ./main.bicep
- stage: Validate
  jobs:
  - job: Validate
    displayName: Validate Bicep code
    steps:
    - task: AzureResourceManagerTemplateDeployment@3
      inputs:
          connectedServiceName: $(ServiceConnectionName)
          location: 'northeurope'
          deploymentMode: Validation
          resourceGroupName: $(ResourceGroupName)
          csmFile: ./main.bicep
- stage: Preview
  jobs:
  - job: Preview
    steps:
    - task: AzureCLI@2
      name: RunWhatIf
      inputs:
        azureSubscription: $(ServiceConnectionName)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az deployment group what-if \
            --resource-group $(ResourceGroupName) \
            --template-file ./main.bicep
# In this step we get output from the bicep file and pass it to our
# pipeline, for smoke tests to run. Returned value is URL for app
# service (web app) and later test step uses it to try and access
# website.
- stage: Deploy
  jobs:
    - deployment: Deploy
      environment: Prod
      strategy:
        runOnce:
          deploy:
            steps:
#            - checkout: self
            - task: AzureResourceManagerTemplateDeployment@3
              name: Deploy
              displayName: Deploy to Azure
              inputs:
                connectedServiceName: $(ServiceConnectionName)
                location: 'polandcentral'
                resourceGroupName: $(ResourceGroupName)
                csmFile: ./main.bicep
                deploymentOutputs: deploymentOutputs
#            - bash: |
#                echo "##vso[task.setvariable variable=appServiceAppHostName;isOutput=true]$(echo $DEPLOYMENT_OUTPUTS | jq -r '.appServiceAppHostName.value')"
#              name: SaveDeploymentOutputs
#              displayName: Save deployment outputs into variables
#              env:
#                DEPLOYMENT_OUTPUTS: $(deploymentOutputs)

# - stage: SmokeTest
#   jobs:
#   - job: SmokeTest
#     displayName: Smoke test with Smoke Testing from powershell script with Pester (unit testing framework for powershell)
#     variables:
#       appServiceAppHostName: $[ stageDependencies.Deploy.DeployWebsite.outputs['DeployWebsite.SaveDeploymentOutputs.appServiceAppHostName'] ]
#     steps:
#       - task: PowerShell@2
#         name: RunSmokeTests
#         displayName: Run smoke tests
#         inputs:
#           targetType: inline
#           script: |
#             $container = New-PesterContainer `
#               -Path './Pipeline.Smoke.Tests.ps1' `
#               -Data @{ HostName = '$(appServiceAppHostName)' }
#             Invoke-Pester `
#               -Container $container `
#               -CI
#       - task: PublishTestResults@2
#         name: PublishTestResults
#         displayName: Publish test results
#         condition: always()
#         inputs:
#           testResultsFormat: NUnit
#           testResultsFiles: 'testResults.xml'